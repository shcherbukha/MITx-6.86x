# Perceptron Mistakes
import numpy as np 

def perceptron (n,x,y, T=100):
"""
n: number of exampels in the training set
x: feature_matrix - numpy matrix describing the given data. 
y: numpy array with correct classification labels of the feature matrix.
T: number times that the learning algorithm will work through the entire training dataset;
   T is traditionally large, often hundreds or thousands, allowing the learning algorithm to run until the error from the model has been sufficiently minimized. 
"""
    theta = np.array([0,0])
    progression = theta
    mistakes = 0
    for _ in range (1, T):
        for i in range (0, n):
            prediction = np.dot(x[i],theta)
            if y[i] * prediction <= 0:
                theta = theta + y[i] * x[i]
                mistakes += 1
                progression = np.concatenate((progression, theta), axis=0)
    return mistakes, progression

mistakes, progression = perceptron(3,(np.array([-1,-1]),  np.array([1,0]),  np.array([-1,10])), np.array([1,-1,1]))
